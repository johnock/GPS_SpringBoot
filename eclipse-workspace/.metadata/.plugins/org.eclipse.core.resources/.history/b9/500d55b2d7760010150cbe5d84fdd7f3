package com.example.findpathserver.service;

import com.example.findpathserver.model.Course;
import com.example.findpathserver.repository.CourseRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class CourseServiceImpl implements CourseService {

    private final CourseRepository courseRepository;

    public CourseServiceImpl(CourseRepository courseRepository) {
        this.courseRepository = courseRepository;
    }

    /** 신규/전체 저장 (컨트롤러에서 그대로 사용) */
    @Override
    public Course save(Course course) {
        // 간단 유효성 체크
        if (!StringUtils.hasText(course.getName())) {
            throw new IllegalArgumentException("Course name is required");
        }
        if (!StringUtils.hasText(course.getPath())) {
            throw new IllegalArgumentException("Course path is required");
        }

        // 필요 시 트리밍
        course.setName(course.getName().trim());
        course.setDescription(course.getDescription() == null ? null : course.getDescription().trim());
        course.setPath(course.getPath().trim());
        course.setColor(course.getColor() == null ? null : course.getColor().trim());
        course.setCoverImageUrl(course.getCoverImageUrl() == null ? null : course.getCoverImageUrl().trim());

        return courseRepository.save(course);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Course> findAll() {
        return courseRepository.findAll();
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Course> findById(Long id) {
        return courseRepository.findById(id);
    }

    /** 부분 수정: null/빈 값은 무시하고 넘어온 필드만 갱신 */
    @Override
    public Course update(Long id, Course partial) {
        Course target = courseRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Course not found: " + id));

        if (StringUtils.hasText(partial.getName())) {
            target.setName(partial.getName().trim());
        }
        if (partial.getDescription() != null) {
            target.setDescription(partial.getDescription().trim());
        }
        if (StringUtils.hasText(partial.getPath())) {
            target.setPath(partial.getPath().trim());
        }
        if (StringUtils.hasText(partial.getColor())) {
            target.setColor(partial.getColor().trim());
        }
        if (partial.getDistanceKm() != null) {
            target.setDistanceKm(partial.getDistanceKm());
        }
        if (partial.getDurationMin() != null) {
            target.setDurationMin(partial.getDurationMin());
        }
        if (partial.getCoverImageUrl() != null) {
            target.setCoverImageUrl(partial.getCoverImageUrl().trim());
        }

        return courseRepository.save(target);
    }

    @Override
    public void delete(Long id) {
        if (!courseRepository.existsById(id)) {
            throw new IllegalArgumentException("Course not found: " + id);
        }
        courseRepository.deleteById(id);
    }
}
